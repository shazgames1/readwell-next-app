name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      # - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      # - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      # - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      # - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      # - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      # - name: List files in the repository
      #   run: |
      #     ls ${{ github.workspace }}
      # - run: echo "üçè This job's status is ${{ job.status }}."
      # - run: npm ci # this means install
      # - run: npm test
      # - run: npm run build
      # - run: npm run deploy

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
          flavor: |
            latest=true

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: "./docker/production/Dockerfile"
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-release

    steps:
      # TODO: zero time deployment
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # export NVM_DIR=~/.nvm
            # source ~/.nvm/nvm.sh
            cd ${{ secrets.APP_DIR }}
            git pull
            cd ./docker/production
            docker compose pull
            # docker compose down
            docker compose up -d
            # npm i -D drizzle-kit
            # npm run db:migrate
            # docker compose exec app npm i -D drizzle-kit
            # docker compose exec app npm run db:migrate
            # ./deploy.sh
            # sh ./my-script.sh
            # git pull
            # cd ./docker/production
            # docker compose pull
            # docker compose down
            # npm i -D drizzle-kit
            # npm run db:migrate
            # docker compose up -d
